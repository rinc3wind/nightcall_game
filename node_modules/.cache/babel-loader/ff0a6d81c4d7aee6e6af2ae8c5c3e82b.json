{"remainingRequest":"/home/rinc/vue_test/nightcall_game/node_modules/babel-loader/lib/index.js!/home/rinc/vue_test/nightcall_game/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/rinc/vue_test/nightcall_game/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rinc/vue_test/nightcall_game/src/Finale.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/rinc/vue_test/nightcall_game/src/Finale.vue","mtime":1564034988893},{"path":"/home/rinc/vue_test/nightcall_game/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rinc/vue_test/nightcall_game/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/rinc/vue_test/nightcall_game/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rinc/vue_test/nightcall_game/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: ['player', 'step'],\n  data: function data() {\n    return {\n      game: null,\n      char: {\n        name: null,\n        xp: 6,\n        strength: 2,\n        dexterity: 2,\n        synth_power: 2,\n        hp: 6,\n        sp: 6,\n        ac: 2,\n        inventory: []\n      }\n    };\n  },\n  methods: {\n    changeStats: function changeStats(stat, which) {\n      if (which == '+' && this.char.xp > 0) {\n        this.char[stat]++;\n        this.char.xp--;\n      }\n\n      if (which == '-' && this.char.xp <= 6 && this.char[stat] > 2) {\n        this.char[stat]--;\n        this.char.xp++;\n      }\n\n      this.char.hp = this.char.strength * 3;\n      this.char.sp = this.char.synth_power * 3;\n      this.char.ac = this.char.dexterity;\n    },\n    diceRoll: function diceRoll(sides) {\n      return Math.floor(Math.random() * sides) + 1;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.char.name = this.player.name;\n    this.char.inventory = this.player.inventory;\n    bus.$on('start_combat', function () {\n      _this.$emit('setStep', 2);\n    }); // create the game instance\n\n    this.game = new RL.Game();\n    var game = this.game; // var mapData = [\n    //     \"#####################\",\n    //     \"#.........#.........#\",\n    //     \"#....Z....#....##...#\",\n    //     \"#.........+....##...#\",\n    //     \"#.........#.........#\",\n    //     \"#.#..#..#.#.........#\",\n    //     \"#.........#...####+##\",\n    //     \"#.........#...#.....#\",\n    //     \"#.........#...#.....#\",\n    //     \"#.........#...#.....#\",\n    //     \"#####################\"\n    // ];\n\n    var mapData = [\"############\", \"##.S..B#####\", \"##.S..B####\", \"##.....####\", \"##.S....D##\", \"#####..####\", \"#####V.####\", \"#####..####\", \"##....S...+\", \"##.S....#W+\", \"##.S....#W#\", \"#######.###\", \"##B......S#\", \"##B......S#\", \"##B......S#\", \"##B......S#\", \"###########\"];\n    var mapCharToType = {\n      '#': 'wall',\n      '.': 'floor',\n      '+': 'door',\n      'S': 'table',\n      'B': 'bar',\n      'W': 'wc',\n      'V': 'vyhadzovaci',\n      'D': 'locked_door'\n    };\n    var entityCharToType = {\n      'Z': 'zombie'\n    };\n    var keyBindings = {\n      up: ['UP_ARROW', 'K', 'W'],\n      down: ['DOWN_ARROW', 'J', 'S'],\n      left: ['LEFT_ARROW', 'H', 'A'],\n      right: ['RIGHT_ARROW', 'L', 'D']\n    };\n    game.map.loadTilesFromArrayString(mapData, mapCharToType, 'floor');\n    game.entityManager.loadFromArrayString(mapData, entityCharToType); // add some lights\n    // game.lighting.set(3, 7, 255, 0, 0);\n    // game.lighting.set(7, 7, 0, 0, 255);\n    // generate and assign a map object (repaces empty default)\n\n    game.setMapSize(game.map.width, game.map.height); // add input keybindings\n\n    game.input.addBindings(keyBindings); // or just add by entity type\n    //game.entityManager.add(5, 9, 'zombie');\n    // set player starting position\n\n    game.player.x = 6;\n    game.player.y = 15; // make the view a little smaller\n\n    game.renderer.resize(30, 20); // get existing DOM elements\n\n    var mapContainerEl = document.getElementById('example-map-container');\n    var consoleContainerEl = document.getElementById('example-console-container'); // append elements created by the game to the DOM\n\n    mapContainerEl.appendChild(game.renderer.canvas);\n    consoleContainerEl.appendChild(game.console.el);\n    game.renderer.layers = [new RL.RendererLayer(game, 'map', {\n      draw: false,\n      mergeWithPrevLayer: false\n    }), new RL.RendererLayer(game, 'entity', {\n      draw: false,\n      mergeWithPrevLayer: true\n    }), new RL.RendererLayer(game, 'lighting', {\n      draw: true,\n      mergeWithPrevLayer: false\n    }), new RL.RendererLayer(game, 'fov', {\n      draw: true,\n      mergeWithPrevLayer: false\n    })];\n    game.console.log('The game starts.'); // start the game\n\n    game.start();\n  }\n};",{"version":3,"sources":["Finale.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div v-show=\"step == 0\">\n\n            <div>\n                <span>Strength: </span>\n                <span>{{ char.strength }}</span>\n                <span class=\"stat_span\" @click=\"changeStats('strength', '+')\">+</span>\n                <span class=\"stat_span\" @click=\"changeStats('strength', '-')\">-</span>\n            </div>\n\n            <div>\n                <span>Dexterity: </span>\n                <span>{{ char.dexterity }}</span>\n                <span class=\"stat_span\" @click=\"changeStats('dexterity', '+')\">+</span>\n                <span class=\"stat_span\" @click=\"changeStats('dexterity', '-')\">-</span>\n            </div>\n            <div>\n                <span>Synth power: </span>\n                <span>{{ char.synth_power }}</span>\n                <span class=\"stat_span\" @click=\"changeStats('synth_power', '+')\">+</span>\n                <span class=\"stat_span\" @click=\"changeStats('synth_power', '-')\">-</span>\n            </div>\n\n            <div style=\"margin-top: 20px;\">\n                Points to allocate: {{ char.xp }}\n            </div>\n\n            <div style=\"margin-top: 20px;\">\n                <span>Hit points: </span>\n                <span>{{ char.hp }}</span>\n            </div>\n            <div>\n                <span>Synth power: </span>\n                <span>{{ char.sp }}</span>\n            </div>\n            <div style=\"margin-bottom: 20px;\">\n                <span>Armor class: </span>\n                <span>{{ char.ac }}</span>\n            </div>\n\n            <div v-if=\"char.xp == 0\" @click=\"$emit('setStep', 1)\" class=\"choice\">{{ lang.continue }}</div>\n        </div>\n        <div v-show=\"step == 1\">\n            <div id=\"example-map-container\" class=\"game-container\"></div>\n            <div id=\"example-console-container\" class=\"game-container\"></div>\n        </div>\n        <div v-if=\"step == 2\">\n            COMBAT\n            <div @click=\"$emit('setStep', 1)\" class=\"choice\">{{ lang.continue }}</div>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        props: ['player', 'step'],\n        data() {\n            return {\n                game: null,\n                char: {\n                    name: null,\n                    xp: 6,\n                    strength: 2,\n                    dexterity: 2,\n                    synth_power: 2,\n                    hp: 6,\n                    sp: 6,\n                    ac: 2,\n                    inventory: []\n                }\n            }\n        },\n        methods: {\n            changeStats(stat, which) {\n                if (which == '+' && this.char.xp > 0) {\n                    this.char[stat]++\n                    this.char.xp--\n                }\n                if (which == '-' && this.char.xp <= 6 && this.char[stat] > 2) {\n                    this.char[stat]--\n                    this.char.xp++\n                }\n                this.char.hp = this.char.strength * 3\n                this.char.sp = this.char.synth_power * 3\n                this.char.ac = this.char.dexterity\n            },\n            diceRoll(sides) {\n                return Math.floor(Math.random() * sides) + 1\n            }\n        },\n        mounted() {\n            this.char.name = this.player.name\n            this.char.inventory = this.player.inventory\n\n            bus.$on('start_combat', () => {\n                this.$emit('setStep', 2)\n            })\n            // create the game instance\n            this.game = new RL.Game();\n            var game = this.game\n\n            // var mapData = [\n            //     \"#####################\",\n            //     \"#.........#.........#\",\n            //     \"#....Z....#....##...#\",\n            //     \"#.........+....##...#\",\n            //     \"#.........#.........#\",\n            //     \"#.#..#..#.#.........#\",\n            //     \"#.........#...####+##\",\n            //     \"#.........#...#.....#\",\n            //     \"#.........#...#.....#\",\n            //     \"#.........#...#.....#\",\n            //     \"#####################\"\n            // ];\n            var mapData = [\n                \"############\",\n                \"##.S..B#####\",\n                \"##.S..B####\",\n                \"##.....####\",\n                \"##.S....D##\",\n                \"#####..####\",\n                \"#####V.####\",\n                \"#####..####\",\n                \"##....S...+\",\n                \"##.S....#W+\",\n                \"##.S....#W#\",\n                \"#######.###\",\n                \"##B......S#\",\n                \"##B......S#\",\n                \"##B......S#\",\n                \"##B......S#\",\n                \"###########\"\n            ];\n\n            var mapCharToType = {\n                '#': 'wall',\n                '.': 'floor',\n                '+': 'door',\n                'S': 'table',\n                'B': 'bar',\n                'W': 'wc',\n                'V': 'vyhadzovaci',\n                'D': 'locked_door'\n            };\n\n            var entityCharToType = {\n                'Z': 'zombie'\n            };\n\n            var keyBindings = {\n                up: ['UP_ARROW', 'K', 'W'],\n                down: ['DOWN_ARROW', 'J', 'S'],\n                left: ['LEFT_ARROW', 'H', 'A'],\n                right: ['RIGHT_ARROW', 'L', 'D'],\n            };\n\n            game.map.loadTilesFromArrayString(mapData, mapCharToType, 'floor');\n            game.entityManager.loadFromArrayString(mapData, entityCharToType);\n\n            // add some lights\n            // game.lighting.set(3, 7, 255, 0, 0);\n            // game.lighting.set(7, 7, 0, 0, 255);\n\n            // generate and assign a map object (repaces empty default)\n            game.setMapSize(game.map.width, game.map.height);\n\n            // add input keybindings\n            game.input.addBindings(keyBindings);\n\n            // or just add by entity type\n            //game.entityManager.add(5, 9, 'zombie');\n\n            // set player starting position\n            game.player.x = 6;\n            game.player.y = 15;\n\n            // make the view a little smaller\n            game.renderer.resize(30, 20);\n\n            // get existing DOM elements\n            var mapContainerEl = document.getElementById('example-map-container');\n            var consoleContainerEl = document.getElementById('example-console-container');\n\n            // append elements created by the game to the DOM\n            mapContainerEl.appendChild(game.renderer.canvas);\n            consoleContainerEl.appendChild(game.console.el);\n\n            game.renderer.layers = [\n                new RL.RendererLayer(game, 'map', {\n                    draw: false,\n                    mergeWithPrevLayer: false\n                }),\n                new RL.RendererLayer(game, 'entity', {\n                    draw: false,\n                    mergeWithPrevLayer: true\n                }),\n                new RL.RendererLayer(game, 'lighting', {\n                    draw: true,\n                    mergeWithPrevLayer: false\n                }),\n                new RL.RendererLayer(game, 'fov', {\n                    draw: true,\n                    mergeWithPrevLayer: false\n                }),\n            ];\n\n            game.console.log('The game starts.');\n            // start the game\n            game.start();\n\n        }\n    }\n</script>\n\n<style>\n    .stat_span {\n        padding-left: 10px;\n        cursor: pointer;\n        font-size: 25px;\n    }\n    .stat_span:hover {\n        color: white;\n    }\n</style>"],"sourceRoot":"src"}]}