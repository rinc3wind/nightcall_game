{"remainingRequest":"/home/rinc/vue_test/nightcall_game/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rinc/vue_test/nightcall_game/src/Chapter5.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/rinc/vue_test/nightcall_game/src/Chapter5.vue","mtime":1563899426844},{"path":"/home/rinc/vue_test/nightcall_game/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/rinc/vue_test/nightcall_game/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/rinc/vue_test/nightcall_game/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/rinc/vue_test/nightcall_game/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rinc/vue_test/nightcall_game/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.D4 {\n    color: white;\n}\n",{"version":3,"sources":["Chapter5.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA;AACA;AACA","file":"Chapter5.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div>\n        <div v-if=\"step == 0\">\n            <!-- Dubravsky cintorin & kostol -->\n            <span v-if=\"audio_loaded == false\" @click=\"test\">START</span>\n            <span v-else @click=\"play\">PLAY</span>\n            {{ currentTime }}\n            <div :class=\"note\">{{ note }}</div>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        props: ['player', 'step'],\n        mounted() {\n        },\n        data() {\n            return {\n                interval: null,\n                currentTime: 0,\n                sound: null,\n                audio_loaded: false,\n                toneVisible: false,\n                // synth_player: {\n                //     paused: true\n                // },\n                midi: {\n                    '11.8': 'G',\n                    '12.2': 'H',\n                    '12.6': 'J',\n                    '13.0': 'H',\n                    '13.4': 'J',\n                    '13.8': 'K',\n                    '14.2': 'J',\n                    '14.6': 'K'\n                },\n                note: null\n            }\n        },\n        computed: {\n        },\n        methods: {\n            start() {\n                this.sound = new Howl({\n                    src: ['mp3/nightcall.mp3']\n                })\n                this.sound.once('load', () => {\n                    this.audio_loaded = true\n                    // this.interval = setInterval(() => {\n                    //     this.currentTime = Math.floor(this.sound.seek() * 10) / 10\n\n                    //     if (this.midi[this.currentTime]) {\n                    //         this.toneVisible = true\n                    //         setTimeout(() => {\n                    //             this.toneVisible = false\n                    //         }, 200)\n                    //     }\n\n                    // }, 50)\n                })\n            },\n            play() {\n                this.sound.play()\n            },\n            test() {\n                var self = this\n                MIDI.loadPlugin({\n                    instruments: ['bass', 'synth_drum', 'acoustic_grand_piano'],\n                    onsuccess: function() {\n                        MIDI.Player.loadFile('mp3/nightcall.mid', () => {\n                            MIDI.Player.addListener(function(data) { // set it to your own function!\n                                var now = data.now; // where we are now\n                                var end = data.end; // time when song ends\n                                var channel = data.channel; // channel note is playing on\n                                var message = data.message; // 128 is noteOff, 144 is noteOn\n                                var note = data.note; // the note\n                                var velocity = data.velocity; // the velocity of the note\n\n                                if (channel == 0) {\n                                    self.note = MIDI.noteToKey[note]\n                                }\n                            });\n                            MIDI.Player.start()\n                        })\n                    }\n                })\n            }\n        },\n        watch:{\n        }\n    }\n</script>\n\n<style>\n    .D4 {\n        color: white;\n    }\n</style>"]}]}